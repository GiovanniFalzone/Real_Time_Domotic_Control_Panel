#ifndef WEBPAGES_H
#define WEBPAGES_H

#define LEN_HOME_PAGE	219
#define LEN_SENSOR_PAGE	303
#define LEN_TASK_PAGE	356

extern const char *home_page[] = {
"<!DOCTYPE html>",
"<html>",
"<head><title>RealTime Domotic System</title>",
"<style>",
"	body {",
"		background-color: rgba(169, 169, 169, 0.4);",
"	}",
"	#title {",
"		line-height: 1",
"	}",
"	.value {",
"		font-style: italic;",
"		font-size: 18px;",
"		font-weight: bold;",
"		color: red;",
"	}",
"	.airquality {",
"		background-color: 	rgba(169, 169, 169, 0.6);",
"		border-radius: 25px;",
"		border: 1px solid #999999;",
"		width: 250px;",
"		font-weight: bold;",
"	}",
"	.airquality, .center {",
"		line-height: 2;",
"		margin: auto;",
"		padding: 20px;",
"		text-align: center;",
"	}",
"	.divTable {",
"		padding-top: 10px;",
"		margin: auto;",
"		display: table;",
"		font-weight: bold;",
"	}",
"	.divTableRow {",
"		display: table-row;",
"	}",
"	.divTableCell, .divTableHead {",
"		background-color: 	rgba(169, 169, 169, 0.6);",
"		border-radius: 25px;",
"		border: 1px solid #999999;",
"		display: table-cell;",
"		padding: 10px;",
"		padding-top: 10px;",
"		margin: auto;",
"		text-align: left;",
"		width: 300px;",
"	}",
"	.actionButton {",
"		display: inline-block;",
"		padding: 16px;",
"		font-size: 12px;",
"		cursor: pointer;",
"		text-align: center;",
"		color: #fff;",
"		background-color: #003399;",
"		border: none;",
"		border-radius: 40%;",
"		box-shadow: 0 6px #999;",
"	}",
"	.actionButton:hover {",
"		background-color: #ff6600;",
"	}",
"	.actionButton.active, .actionButton:active {",
"		background-color: #ff6600;",
"		box-shadow: 0 6px #666;",
"		transform: translateY(4px);",
"	}",
"	.pageButton {",
"		display: inline-block;",
"		border-radius: 16px;",
"		background-color: #f4511e;",
"		border: 1px solid black;",
"		box-shadow: 0 5px #999;",
"		color: #FFFFFF;",
"		text-align: center;",
"		font-size: 16px;",
"		padding: 16px;",
"		width: 150px;",
"		height: 50px;",
"		transition: all 0.5s;",
"		cursor: pointer;",
"	}",
"	.pageButton:hover {",
"		background-color: #6495ED;",
"		box-shadow: 0 8px #999;",
"	}",
"	.pageButton:hover span {",
"		font-size: 20px;",
"	}",
"</style>",
"<script>",
"var wsUri = \"ws://192.168.1.2:8080\";",
"var websocket;",
"",
"var myTimeoutCloseEvt;",
"",
"window.onclose = function() {",
"    websocket.close();",
"};",
"",
"function closeSocketTimeout() {",
"    myTimeoutCloseEvt = setTimeout(function(){ websocket.close(); }, 5000);",
"}",
"function resetTimeout() {",
"    clearTimeout(myTimeoutCloseEvt);",
"}",
"",
"function loadpage(page){",
"	websocket.close();",
"	window.location.href=page;",
"}",
"",
"function ChangeButtonState(id, value){",
"	var button = document.getElementById(id);",
"	if(value == 0 )",
"		button.classList.remove(\"active\");",
"	else",
"		button.classList.add(\"active\");",
"}",
"function SwitchOnOffButtons(id, value){",
"	var idOn = id + \"1\";",
"	var idOff = id + \"0\";",
"	ChangeButtonState(idOn, value);",
"	ChangeButtonState(idOff, !value);",
"}",
"",
"function init() {",
"	websocket = new WebSocket(wsUri);",
"	websocket.onopen = function(evt) { console.log('websocket open'); };",
"	websocket.onclose = function(evt) { websocket.close(); };",
"	websocket.onerror = function(evt) { console.log(evt); };",
"	websocket.onmessage = function(evt) { onMessage(evt) };",
"}",
"",
"function onMessage(evt){",
"	var myJSON=evt.data;",
"	var myObj=JSON.parse(myJSON);",
"	var e=document.getElementById(myObj.id);",
"	switch(myObj.id){",
"		case \"L\":",
"		case \"T\":",
"			SwitchOnOffButtons(myObj.id, myObj.value);",
"			break;",
"",
"		case \"LA\":",
"		case \"TA\":",
"			ChangeButtonState(myObj.id, myObj.value);",
"			break;",
"",
"		default:",
"			if(e)",
"				e.innerHTML=myObj.value;",
"			break;",
"	}",
"",
"	resetTimeout();",
"	closeSocketTimeout();",
"}",
"function buttonclick(c) {",
"	websocket.send(c);",
"}",
"</script>",
"</head>",
"",
"<body onload=\"init()\">",
"	<div id=\"title\" class=\"center\">",
"		<h1> Real Time Domotic over Arduino </h1>",
"		<button class=\"pageButton\" onclick = \"loadpage('http://192.168.1.2/0')\"><span>Home</span></button>",
"		<button class=\"pageButton\" onclick = \"loadpage('http://192.168.1.2/1')\"><span>Sensors</span></button>",
"		<button class=\"pageButton\" onclick = \"loadpage('http://192.168.1.2/2')\"><span>Tasks</span></button>",
"	</div>",
"	<div class=\"divTable\">",
"		<div id=\"box\" class=\"divTableBody\">",
"			<div class = \"divTableRow\">",
"				<div class = \"divTableCell\">",
"					<div class=\"center\">",
"						<div>Luminosity: <span id=\"lux\" class=\"value\"></span> lumen</div>",
"						<button id=\"L1\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">On</button>",
"						<button id=\"L0\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">Off</button>",
"						<button id=\"LA\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">Auto</button>",
"					</div>",
"					<div class=\"center\">",
"						<div>Desired Luminosity: <span id=\"DesLux\" class=\"value\"></span> lumen</div>",
"						<div>",
"							<button id=\"L-\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">-</button>",
"							<button id=\"L+\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">+</button>",
"						</div>",
"					</div>",
"				</div>",
"				<div class = \"divTableCell\">",
"					<div class=\"center\">",
"						<div>Temperature: <span id=\"temp\" class=\"value\"></span></div>",
"						<button id=\"T1\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">On</button>",
"						<button id=\"T0\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">Off</button>",
"						<button id=\"TA\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">Auto</button>",
"					</div>",
"					<div class=\"center\">",
"						<div>Desired Temperature: <span id=\"DesTemp\" class=\"value\"></span></div>",
"						<div>",
"							<button id=\"T-\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">-</button>",
"							<button id=\"T+\" class=\"actionButton\" onclick= \"buttonclick(this.id)\">+</button>",
"						</div>",
"					</div>",
"				</div>",
"			</div>",
"		</div>",
"	</div>",
"	<div class=\"airquality\">",
"		<div>",
"			Humidity: <span id=\"hum\" class=\"value\"></span> %",
"		</div>",
"		<div>",
"			Gas: <span id=\"gas\" class=\"value\"></span>",
"		</div>",
"	</div>",
"</body>",
"</html>"
};
extern const char *sensor_page[] = {
"<!DOCTYPE html>",
"<html>",
"<head><title>Sensors</title>",
"<style>",
"	body {",
"		background-color: rgba(169, 169, 169, 0.4);",
"	}",
"	#title {",
"		line-height: 1",
"	}",
"	.value {",
"		font-style: italic;",
"		font-size: 18px;",
"		font-weight: bold;",
"		color: red;",
"	}",
"	.plot {",
"		background-color: white;",
"		border-radius: 10px;",
"		width : 500px;",
"		height : 250px;",
"		border : 1px solid #d3d3d3;",
"	}",
"	.center {",
"		line-height: 2;",
"		margin: auto;",
"		padding: 20px;",
"		text-align: center;",
"	}",
"	.divTable {",
"		padding-top: 10px;",
"		margin: auto;",
"		display: table;",
"	}",
"	.divTableRow {",
"		display: table-row;",
"	}",
"	.divTableCell {",
"		background-color: 	rgba(169, 169, 169, 0.6);",
"		border-radius: 25px;",
"		border: 1px solid #999999;",
"		display: table-cell;",
"		padding: 10px;",
"		text-align: center;",
"		width: 525px;",
"	}",
"	.divTableBody {",
"		display: table-row-group;",
"	}",
"	.actionButton {",
"		display: inline-block;",
"		padding: 16px;",
"		font-size: 12px;",
"		cursor: pointer;",
"		text-align: center;",
"		color: #fff;",
"		background-color: #003399;",
"		border: none;",
"		border-radius: 40%;",
"		box-shadow: 0 6px #999;",
"	}",
"	.actionButton:hover {",
"		background-color: #ff6600;",
"	}",
"	.actionButton.active, .actionButton:active {",
"		background-color: #ff6600;",
"		box-shadow: 0 6px #666;",
"		transform: translateY(4px);",
"	}",
"	.pageButton {",
"		display: inline-block;",
"		border-radius: 16px;",
"		background-color: #f4511e;",
"		border: 1px solid black;",
"		box-shadow: 0 5px #999;",
"		color: #FFFFFF;",
"		text-align: center;",
"		font-size: 16px;",
"		padding: 16px;",
"		width: 150px;",
"		height: 50px;",
"		transition: all 0.5s;",
"		cursor: pointer;",
"	}",
"	.pageButton:hover {",
"		background-color: #6495ED;",
"		box-shadow: 0 8px #999;",
"	}",
"	.pageButton:hover span {",
"		font-size: 20px;",
"	}",
"</style>",
"<script>",
"var wsUri = \"ws://192.168.1.2:8080\";",
"",
"var cursor_size = 1;",
"var canvas_width = 500;",
"var canvas_height = 250;",
"",
"var shadow_width = 1000;",
"var shadow_height = 1000;		//worstcase",
"",
"var ShadowCanvas = [];",
"",
"var default_scale = 1;",
"var scale = default_scale;",
"var scale_factor = 0.1;",
"",
"var myTimeoutCloseEvt;",
"",
"window.onclose = function() {",
"    websocket.close();",
"};",
"",
"function closeSocketTimeout() {",
"    myTimeoutCloseEvt = setTimeout(function(){ websocket.close(); }, 5000);",
"}",
"",
"function resetTimeout() {",
"    clearTimeout(myTimeoutCloseEvt);",
"}",
"",
"function loadpage(page){",
"	websocket.close();",
"	window.location.href=page;",
"}",
"",
"function addEntry(idname, canvas, context, value) {",
"	ShadowCanvas.push({",
"		who : idname,",
"		Canvas : canvas,",
"		Context : context,",
"		last : value",
"	});",
"}",
"",
"function init() {",
"	websocket = new WebSocket(wsUri);",
"	websocket.onmessage = function(evt) { onMessage(evt) };",
"	websocket.onerror = function(evt) { onError(evt) };",
"",
"	var c = document.getElementsByTagName(\"canvas\");",
"	for(var j=0; j<c.length; j++){",
"		var ctx = c[j].getContext(\"2d\");",
"		var drawCanvas = document.createElement('canvas');",
"		var drawCtx = drawCanvas.getContext(\"2d\");",
"		drawCanvas.width = shadow_width;",
"		if(c[j].id == \"lux_plot\")",
"			drawCanvas.height = 5000;",
"		else",
"			drawCanvas.height = shadow_height;",
"		addEntry(c[j].id, drawCanvas, drawCtx, 0);",
"	}",
"}",
"",
"function zoom(){",
"	var dest_w = canvas_width;",
"	var dest_h = canvas_height;",
"",
"	var source_w = (dest_w * (1 / (scale + scale_factor)));",
"	var source_h = (dest_h * (1 / (scale + scale_factor)));",
"",
"	if((source_w <= shadow_width) && (source_h <= shadow_height))",
"		scale += scale_factor;",
"",
"	for(var i=0; i<ShadowCanvas.length; i++)",
"		updateCanvas(ShadowCanvas[i].who);",
"}",
"",
"function dezoom(){",
"	if ((scale - scale_factor) > 0)",
"		scale -= scale_factor;",
"",
"	for(var i=0; i<ShadowCanvas.length; i++)",
"		updateCanvas(ShadowCanvas[i].who);",
"}",
"",
"function ResetZoom(){",
"	scale = default_scale;",
"	for(var i=0; i<ShadowCanvas.length; i++)",
"		updateCanvas(ShadowCanvas[i].who);",
"}",
"",
"function updateCanvas(idname) {",
"	ctx = document.getElementById(idname).getContext(\"2d\");",
"	var lastvalue = 0;",
"	for(var j=0; j<ShadowCanvas.length; j++) {",
"		if(ShadowCanvas[j].who == idname) {",
"			drawCanvas = ShadowCanvas[j].Canvas;",
"			lastvalue = ShadowCanvas[j].last;",
"		}",
"	}",
"",
"	var sw = drawCanvas.width;",
"	var sh = drawCanvas.height;",
"",
"	var dest_w = ctx.canvas.width;",
"	var dest_h = ctx.canvas.height;",
"",
"	var source_w = (dest_w * (1 / scale));",
"	var source_h = (dest_h * (1 / scale));",
"",
"	var source_x = (sw - (source_w));",
"	var source_y = (sh - lastvalue - (source_h / 2));",
"",
"	ctx.clearRect(0, 0, dest_w, dest_h);",
"	ctx.drawImage(drawCanvas, source_x, source_y, source_w, source_h, 0, 0, dest_w, dest_h);",
"}",
"",
"function slide_image(ctx){",
"	var img, x, y, width, height;",
"	x = cursor_size;",
"	y = 0;",
"	width = (ctx.canvas.width - cursor_size);",
"	height = ctx.canvas.height;",
"	img = ctx.getImageData(x, y, width, height);",
"	ctx.putImageData(img, 0, 0);",
"	ctx.clearRect(width, y, x, height);",
"}",
"",
"function Print_onCanvas(idname, value) {",
"	var ctx;",
"	var j = 0;",
"	for(j=0; j<ShadowCanvas.length; j++) {",
"		if(ShadowCanvas[j].who == idname) {",
"			ctx = ShadowCanvas[j].Context;",
"			ShadowCanvas[j].last = value;",
"		}",
"	}",
"	var x = ctx.canvas.width - cursor_size;",
"	var y = ctx.canvas.height - value;",
"	var width = cursor_size;",
"	var height = cursor_size;",
"	ctx.fillRect(x, y, width, height);",
"	ctx.stroke();",
"	slide_image(ctx);",
"}",
"",
"function onMessage(evt){",
"	var myJSON=evt.data;",
"	var myObj=JSON.parse(myJSON);",
"	var e=document.getElementById(myObj.id);",
"	e.innerHTML=myObj.value;",
"	var value;",
"	if(myObj.id==\"temp\" || myObj.id==\"hum\"){",
"		value=parseFloat(myObj.value);",
"	} else {",
"		value=parseInt(myObj.value);",
"	}",
"	Print_onCanvas(myObj.id + \"_plot\", value);",
"	updateCanvas(myObj.id + \"_plot\");",
"	resetTimeout();",
"	closeSocketTimeout();",
"}",
"",
"function onError(evt) {}",
"",
"</script>",
"</head>",
"<body onload=\"init()\">",
"<div id=\"title\" class=\"center\">",
"	<h1> Real Time Domotic over Arduino </h1>",
"	<button class=\"pageButton\" onclick = \"loadpage('http://192.168.1.2/0')\"><span>Home</span></button>",
"	<button class=\"pageButton\" onclick = \"loadpage('http://192.168.1.2/1')\"><span>Sensors</span></button>",
"	<button class=\"pageButton\" onclick = \"loadpage('http://192.168.1.2/2')\"><span>Tasks</span></button>",
"</div>",
"<div class=\"center\">",
"	<button class=\"actionButton\" onclick=\"zoom()\">Zoom(+)</button>",
"	<button class=\"actionButton\" onclick=\"dezoom()\">Zoom(-)</button>",
"	<button class=\"actionButton\" onclick=\"ResetZoom()\">Reset Zoom</button>",
"</div>",
"<div class=\"divTable\">",
"	<div class=\"divTableBody\">",
"		<div class=\"divTableRow\">",
"			<div class=\"divTableCell\">",
"				<div>Motion Detection: <span id=\"pir\" class=\"value\"></span></div>",
"				<div><canvas id=\"pir_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"			<div class=\"divTableCell\">",
"				<div>Temperature: <span id=\"temp\" class=\"value\"></span></div>",
"				<div><canvas id=\"temp_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"		</div>",
"		<div class=\"divTableRow\">",
"			<div class=\"divTableCell\">",
"				<div>Humidity: <span id=\"hum\" class=\"value\"></span></div>",
"				<div><canvas id=\"hum_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"			<div class=\"divTableCell\">",
"				<div>Gas: <span id=\"gas\" class=\"value\"></span></div>",
"				<div><canvas id=\"gas_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"		</div>",
"		<div class=\"divTableRow\">",
"			<div class=\"divTableCell\">",
"				<div>Luminosity: <span id=\"lux\" class=\"value\"></span></div>",
"				<div><canvas id=\"lux_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"		</div>",
"	</div>",
"</div>",
"</body>",
"</html>"
};
extern const char *task_page[] = {
"<!DOCTYPE html>",
"<html>",
"<head>",
"<style>",
"	body {",
"		background-color: rgba(169, 169, 169, 0.4);",
"	}",
"	#title {",
"		line-height: 1",
"	}",
"	.value {",
"		font-style: italic;",
"		font-size: 18px;",
"		font-weight: bold;",
"		color: red;",
"	}",
"	.plot {",
"		background-color: white;",
"		border-radius: 10px;",
"		width : 500px;",
"		height : 250px;",
"		border : 1px solid #d3d3d3;",
"	}",
"	.center {",
"		line-height: 2;",
"		margin: auto;",
"		padding: 20px;",
"		text-align: center;",
"	}",
"	.divTable {",
"		padding-top: 10px;",
"		margin: auto;",
"		display: table;",
"	}",
"	.divTableRow {",
"		display: table-row;",
"	}",
"	.divTableCell {",
"		background-color: 	rgba(169, 169, 169, 0.6);",
"		border-radius: 25px;",
"		border: 1px solid #999999;",
"		display: table-cell;",
"		padding: 10px;",
"		text-align: center;",
"		width: 525px;",
"	}",
"	.divTableBody {",
"		display: table-row-group;",
"	}",
"	#infotable .divTableCell {",
"		text-align: left;",
"		width: 400px;		",
"	}",
"	.actionButton {",
"		display: inline-block;",
"		padding: 16px;",
"		font-size: 12px;",
"		cursor: pointer;",
"		text-align: center;",
"		color: #fff;",
"		background-color: #003399;",
"		border: none;",
"		border-radius: 40%;",
"		box-shadow: 0 6px #999;",
"	}",
"	.actionButton:hover {",
"		background-color: #ff6600;",
"	}",
"	.actionButton.active, .actionButton:active {",
"		background-color: #ff6600;",
"		box-shadow: 0 6px #666;",
"		transform: translateY(4px);",
"	}",
"	.pageButton {",
"		display: inline-block;",
"		border-radius: 16px;",
"		background-color: #f4511e;",
"		border: 1px solid black;",
"		box-shadow: 0 5px #999;",
"		color: #FFFFFF;",
"		text-align: center;",
"		font-size: 16px;",
"		padding: 16px;",
"		width: 150px;",
"		height: 50px;",
"		transition: all 0.5s;",
"		cursor: pointer;",
"	}",
"	.pageButton:hover {",
"		background-color: #6495ED;",
"		box-shadow: 0 8px #999;",
"	}",
"	.pageButton:hover span {",
"		font-size: 20px;",
"	}",
"</style>",
"<script>",
"var wsUri = \"ws://192.168.1.2:8080\";",
"",
"var cursor_size = 1;",
"",
"var canvas_width = 500;",
"var canvas_height = 250;",
"",
"var T2Period = 2000;",
"var T4Period = 5000;",
"",
"var shadow_width = 1000;",
"var shadow_height = 1000;",
"",
"var ShadowCanvas = [];",
"",
"var default_scale = 1;",
"",
"var scale = default_scale;",
"",
"var scale_factor = 0.1;",
"",
"var myTimeoutCloseEvt;",
"",
"window.onclose = function() {",
"    websocket.close();",
"};",
"",
"",
"function closeSocketTimeout() {",
"    myTimeoutCloseEvt = setTimeout(function(){ websocket.close(); }, 5000);",
"}",
"function resetTimeout() {",
"    clearTimeout(myTimeoutCloseEvt);",
"}",
"",
"function loadpage(page){",
"	websocket.close();",
"	window.location.href = page;",
"}",
"",
"function addEntry(idname, canvas, context, value) {",
"	ShadowCanvas.push({",
"		who : idname,",
"		Canvas : canvas,",
"		Context : context,",
"		last : value",
"	});",
"}",
"",
"function init() {",
"	websocket = new WebSocket(wsUri);",
"	websocket.onmessage = function(evt) { onMessage(evt) };",
"	websocket.onerror = function(evt) { onError(evt) };",
"",
"	var c = document.getElementsByTagName(\"canvas\");",
"	for(var j=0; j<c.length; j++){",
"		var ctx = c[j].getContext(\"2d\");",
"		var drawCanvas = document.createElement('canvas');",
"		var drawCtx = drawCanvas.getContext(\"2d\");",
"		drawCanvas.width = shadow_width;",
"		if(c[j].id == \"T2AvgExecTime_plot\")",
"			drawCanvas.height = T2Period;",
"		else if(c[j].id == \"T4AvgExecTime_plot\")",
"			drawCanvas.height = T4Period;",
"		else",
"			drawCanvas.height = shadow_height;",
"		addEntry(c[j].id, drawCanvas, drawCtx, 0);",
"	}",
"}",
"",
"function zoom(){",
"	var dest_w = canvas_width;",
"	var dest_h = canvas_height;",
"",
"	var source_w = (dest_w * (1 / (scale + scale_factor)));",
"	var source_h = (dest_h * (1 / (scale + scale_factor)));",
"",
"	if((source_w <= shadow_width) && (source_h <= shadow_height))",
"		scale += scale_factor;",
"",
"	for(var i=0; i<ShadowCanvas.length; i++)",
"		updateCanvas(ShadowCanvas[i].who);",
"}",
"",
"function dezoom(){",
"	if ((scale - scale_factor) > 0)",
"		scale -= scale_factor;",
"",
"	for(var i=0; i<ShadowCanvas.length; i++)",
"		updateCanvas(ShadowCanvas[i].who);",
"}",
"",
"function ResetZoom(){",
"	scale = default_scale;",
"	for(var i=0; i<ShadowCanvas.length; i++)",
"		updateCanvas(ShadowCanvas[i].who);",
"}",
"",
"function updateCanvas(idname) {",
"	ctx = document.getElementById(idname).getContext(\"2d\");",
"	var lastvalue = 0;",
"	for(var j=0; j<ShadowCanvas.length; j++) {",
"		if(ShadowCanvas[j].who == idname) {",
"			drawCanvas = ShadowCanvas[j].Canvas;",
"			lastvalue = ShadowCanvas[j].last;",
"		}",
"	}",
"",
"	var sw = drawCanvas.width;",
"	var sh = drawCanvas.height;",
"",
"	var dest_w = ctx.canvas.width;",
"	var dest_h = ctx.canvas.height;",
"",
"	var source_w = (dest_w * (1 / scale));",
"	var source_h = (dest_h * (1 / scale));",
"",
"	var source_x = (sw - (source_w));",
"	var source_y = (sh - lastvalue - (source_h / 2));",
"",
"	ctx.clearRect(0, 0, dest_w, dest_h);",
"	ctx.drawImage(drawCanvas, source_x, source_y, source_w, source_h, 0, 0, dest_w, dest_h);",
"}",
"",
"function slide_image(ctx){",
"	var img, x, y, width, height;",
"	x = cursor_size;",
"	y = 0;",
"	width = (ctx.canvas.width - cursor_size);",
"	height = ctx.canvas.height;",
"	img = ctx.getImageData(x, y, width, height);",
"	ctx.putImageData(img, 0, 0);",
"	ctx.clearRect(width, y, x, height);",
"}",
"",
"function Print_onCanvas(idname, value) {",
"	var ctx;",
"	var j = 0;",
"	for(j=0; j<ShadowCanvas.length; j++) {",
"		if(ShadowCanvas[j].who == idname) {",
"			ctx = ShadowCanvas[j].Context;",
"			ShadowCanvas[j].last = value;",
"		}",
"	}",
"	var x = ctx.canvas.width - cursor_size;",
"	var y = ctx.canvas.height - value;",
"	var width = cursor_size;",
"	var height = cursor_size;",
"	ctx.fillRect(x, y, width, height);",
"	ctx.stroke();",
"	slide_image(ctx);",
"}",
"",
"function onMessage(evt){",
"	var myJSON=evt.data;",
"	var myObj=JSON.parse(myJSON);",
"	var e=document.getElementById(myObj.id);",
"	e.innerHTML=myObj.value;",
"	var value=parseInt(myObj.value);",
"	if(myObj.id.indexOf(\"AvgExecTime\") > 0) {",
"		Print_onCanvas(myObj.id + \"_plot\", value);",
"		updateCanvas(myObj.id + \"_plot\");",
"	}",
"	resetTimeout();",
"	closeSocketTimeout();",
"}",
"function onError(evt) {}",
"</script>",
"</head>",
"",
"<body onload=\"init()\">",
"<div id=\"title\" class=\"center\">",
"	<h1> Real Time Domotic over Arduino </h1>",
"	<button class=\"pageButton\" onclick = \"loadpage('http://192.168.1.2/0')\"><span>Home</span></button>",
"	<button class=\"pageButton\" onclick = \"loadpage('http://192.168.1.2/1')\"><span>Sensors</span></button>",
"	<button class=\"pageButton\" onclick = \"loadpage('http://192.168.1.2/2')\"><span>Tasks</span></button>",
"</div>",
"<div id=\"infotable\" class=\"divTable\">",
"	<div class=\"divTableBody\">",
"		<div class=\"divTableRow\">",
"			<div class=\"divTableCell\">",
"				<b><div>Task1: TaskSensor</div></b>",
"				<div>Period: <span id=\"T1Period\" class=\"value\"></span></div>",
"				<div>Max Execution: <span id=\"T1MaxExec\" class=\"value\"></span></div>",
"				<div>Execution Time: <span id=\"T1ExecTime\" class=\"value\"></span></div>",
"				<div>Deadline misses: <span id=\"T1Deadmiss\" class=\"value\"></span></div>",
"			</div>",
"			<div class=\"divTableCell\">",
"				<b><div>Task2: TaskSensor</div></b>",
"				<div>Period: <span id=\"T2Period\" class=\"value\"></span></div>",
"				<div>Max Execution: <span id=\"T2MaxExec\" class=\"value\"></span></div>",
"				<div>Execution Time: <span id=\"T2ExecTime\" class=\"value\"></span></div>",
"				<div>Deadline misses: <span id=\"T2Deadmiss\" class=\"value\"></span></div>			",
"			</div>",
"		</div>",
"		<div class=\"divTableRow\">",
"			<div class=\"divTableCell\">",
"				<b><div>Task3: Task ControlPanel</div></b>",
"				<div>Period: <span id=\"T3Period\" class=\"value\"></span></div>",
"				<div>Max Execution: <span id=\"T3MaxExec\" class=\"value\"></span></div>",
"				<div>Execution Time: <span id=\"T3ExecTime\" class=\"value\"></span></div>",
"				<div>Deadline misses: <span id=\"T3Deadmiss\" class=\"value\"></span></div>",
"			</div>",
"			<div class=\"divTableCell\">",
"				<b><div>Task4: Task WebServer</div></b>",
"				<div>Period: <span id=\"T4Period\" class=\"value\"></span></div>",
"				<div>Max Execution: <span id=\"T4MaxExec\" class=\"value\"></span></div>",
"				<div>Execution Time: <span id=\"T4ExecTime\" class=\"value\"></span></div>",
"				<div>Deadline misses: <span id=\"T4Deadmiss\" class=\"value\"></span></div>",
"			</div>",
"		</div>",
"		<div class=\"divTableRow\">",
"			<div class=\"divTableCell\">",
"				<b><div>Task5: Task WebSocket</div></b>",
"				<div>Period: <span id=\"T5Period\" class=\"value\"></span></div>",
"				<div>Max Execution: <span id=\"T5MaxExec\" class=\"value\"></span></div>",
"				<div>Execution Time: <span id=\"T5ExecTime\" class=\"value\"></span></div>",
"				<div>Deadline misses: <span id=\"T5Deadmiss\" class=\"value\"></span></div>",
"			</div>",
"		</div>",
"	</div>",
"</div>",
"<div class=\"center\">",
"	<button class=\"actionButton\" onclick=\"zoom()\">Zoom(+)</button>",
"	<button class=\"actionButton\" onclick=\"dezoom()\">Zoom(-)</button>",
"	<button class=\"actionButton\" onclick=\"ResetZoom()\">Reset Zoom</button>",
"</div>",
"<div class=\"divTable\">",
"	<div class=\"divTableBody\">",
"		<div class=\"divTableRow\">",
"			<div class=\"divTableCell\">",
"				<div>Task1 Average Execution Time: <span id=\"T1AvgExecTime\" class=\"value\"></span></div>",
"				<div><canvas id=\"T1AvgExecTime_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"			<div class=\"divTableCell\">",
"				<div>Task2 Average Execution Time: <span id=\"T2AvgExecTime\" class=\"value\"></span></div>",
"				<div><canvas id=\"T2AvgExecTime_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"		</div>",
"		<div class=\"divTableRow\">",
"			<div class=\"divTableCell\">",
"				<div>Task3 Average Execution Time: <span id=\"T3AvgExecTime\" class=\"value\"></span></div>",
"				<div><canvas id=\"T3AvgExecTime_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"			<div class=\"divTableCell\">",
"				<div>Task4 Average Execution Time: <span id=\"T4AvgExecTime\" class=\"value\"></span></div>",
"				<div><canvas id=\"T4AvgExecTime_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"		</div>",
"		<div class=\"divTableRow\">",
"			<div class=\"divTableCell\">",
"				<div>Task5 Average Execution Time: <span id=\"T5AvgExecTime\" class=\"value\"></span></div>",
"				<div><canvas id=\"T5AvgExecTime_plot\" class=\"plot\" width=500 height=250></canvas></div>",
"			</div>",
"		</div>",
"	</div>",
"</div>",
"</body>",
"</html>"
};
#endif